Sistema de cadastro de clínica médica
import sqlite3 as lite

#criando conexão
con = lite.connect("dados.bdz")

#criando tabela
with con:
    cur = con.cursor()
    cur.execute('CREATE TABLE formulario(id INTEGER PRIMARY KEY AUTOINCREMENT,Nome TEXT, email TXT,telefone INT,Data TEXT,Estado TEXT,Sobre TEXT)')


import tkinter
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
# importando views
from conector import *

# cores
co0 = "#f0f3f5"  # Preta
co1 = "#feffff"  # branca
co2 = "#4fa882"  # verde
co3 = "#38576b"  # valor
co4 = "#403d3d"  # letra
co5 = "#e06636"  # - profit
co6 = "#038cfc"  # azul
co7 = "#ef5350"  # vermelha
co8 = "#263238"  # + verde
co9 = "#e9edf5"  # sky blue

# criando janela

janela = Tk()
janela.title('crud')
janela.geometry('1043x453')
janela.configure(background=co9)
janela.resizable(False, False)

# dividindo janela
frame_cima = Frame(janela, width=310, height=50, bg=co2, relief='flat')
frame_cima.grid(row=0, column=0)

frame_baixo = Frame(janela, width=310, height=403, bg=co1, relief='flat')
frame_baixo.grid(row=1, column=0, sticky=NSEW, padx=0, pady=1)

frame_direito = Frame(janela, width=388, height=500, bg=co1, relief='flat')
frame_direito.grid(row=0, column=1, rowspan=2, padx=1, sticky=NSEW)

# texto cima

app_nome = Label(frame_cima, text="FORMULÁRIO DE CONSULTORIA", bg=co2, relief='flat', anchor=NW, font=('Ivy 13 bold'),
                 fg=co1)
app_nome.place(x=10, y=20)


# funcao inserir

def inserir():
    nome = e_nome.get()
    email = e_email.get()
    tele = e_tele.get()
    dia = e_data.get()
    estado = e_esta.get()
    assunto = e_consu.get()

    lista = [nome, email, tele, dia, estado, assunto]

    if nome == "":
        messagebox.showerror('Erro', 'o nome não pode ser vazio')

    if email == "":
        messagebox.showerror('Erro', 'o email não pode ser vazio')
    if tele == "":
        messagebox.showerror('Erro', 'o telefone não pode ser vazio')
    if dia == "":
        messagebox.showerror('Erro', 'o dia não pode ser vazio')
    if estado == "":
        messagebox.showerror('Erro', 'o Estado não pode ser vazio')
    else:
        inserir_info(lista)
        messagebox.showinfo('Sucesso', "os dados foram inseridos")

        e_nome.delete(0, 'end')
        e_email.delete(0, 'end')
        e_tele.delete(0, 'end')
        e_data.delete(0, 'end')
        e_esta.delete(0, 'end')
        e_consu.delete(0, 'end')

    for widget in frame_direito.winfo_children():
        widget.destroy()

    mostrar()


# texto baixo

l_nome = Label(frame_baixo, text="Nome *", bg=co1, relief='flat', anchor=NW, font='Ivy 10 bold', fg=co4)
l_nome.place(x=10, y=10)
e_nome = Entry(frame_baixo, relief='solid', width=40, justify='left', font='Ivy 10 bold', fg=co4)
e_nome.place(x=10, y=40)

l_email = Label(frame_baixo, text="Email *", bg=co1, relief='flat', anchor=NW, font='Ivy 10 bold', fg=co4)
l_email.place(x=10, y=70)
e_email = Entry(frame_baixo, relief='solid', width=40, justify='left', font='Ivy 10 bold', fg=co4)
e_email.place(x=10, y=100)

# telefone

l_tele = Label(frame_baixo, text="Telefone *", bg=co1, relief='flat', anchor=NW, font=('Ivy 10 bold'), fg=co4)
l_tele.place(x=10, y=130)
e_tele = Entry(frame_baixo, relief='solid', width=40, justify='left', font=('Ivy 10 bold'), fg=co4)
e_tele.place(x=10, y=160)

# consulta
l_consu = Label(frame_baixo, text="Consulta sobre *", bg=co1, relief='flat', anchor=NW, font=('Ivy 10 bold'), fg=co4)
l_consu.place(x=10, y=270)
e_consu = Entry(frame_baixo, relief='solid', width=40, justify='left', font=('Ivy 10 bold'), fg=co4)
e_consu.place(x=10, y=300)

l_data = Label(frame_baixo, text="Data da Consulta *", bg=co1, relief='flat', anchor=NW, font=('Ivy 10 bold'), fg=co4)
l_data.place(x=10, y=190)
e_data = Entry(frame_baixo, relief='solid', width=19, justify='left', font=('Ivy 10 bold'), fg=co4)
e_data.place(x=10, y=220)

l_esta = Label(frame_baixo, text="Estado da Consulta *", bg=co1, relief='flat', anchor=NW, font=('Ivy 10 bold'), fg=co4)
l_esta.place(x=160, y=190)
e_esta = Entry(frame_baixo, relief='solid', width=19, justify='left', font=('Ivy 10 bold'), fg=co4)
e_esta.place(x=160, y=220)

# botoes


global tree


def mostrar():
    global tree

    lista = mostrar_info()

    # lista para cabecario
    tabela_head = ['ID', 'Nome', 'email', 'telefone', 'Data', 'Estado', 'Sobre']

    # criando a tabela
    tree = ttk.Treeview(frame_direito, selectmode="extended", columns=tabela_head, show="headings")

    # vertical scrollbar
    vsb = ttk.Scrollbar(frame_direito, orient="vertical", command=tree.yview)

    # horizontal scrollbar
    hsb = ttk.Scrollbar(frame_direito, orient="horizontal", command=tree.xview)

    tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
    tree.grid(column=0, row=0, sticky='nsew')
    vsb.grid(column=1, row=0, sticky='ns')
    hsb.grid(column=0, row=1, sticky='ew')

    frame_direito.grid_rowconfigure(0, weight=12)

    hd = ["nw", "nw", "nw", "nw", "nw", "center", "center"]
    h = [30, 170, 140, 100, 120, 50, 100]
    n = 0

    for col in tabela_head:
        tree.heading(col, text=col.title(), anchor=CENTER)
        # adjust the column's width to the header string
        tree.column(col, width=h[n], anchor=hd[n])

        n += 1

    for item in lista:
        tree.insert('', 'end', values=item)


# funcao att
global b4


def atualizar():
    try:
        treev_dados = tree.focus()
        treev_dicionario = tree.item(treev_dados)
        tree_lista = treev_dicionario['values']

        valor_id = tree_lista[0]

        e_nome.delete(0, 'end')
        e_email.delete(0, 'end')
        e_tele.delete(0, 'end')
        e_data.delete(0, 'end')
        e_esta.delete(0, 'end')
        e_consu.delete(0, 'end')

        e_nome.insert(0, tree_lista[1])
        e_email.insert(0, tree_lista[2])
        e_tele.insert(0, tree_lista[3])
        e_data.insert(0, tree_lista[4])
        e_esta.insert(0, tree_lista[5])
        e_consu.insert(0, tree_lista[6])

        def update():
            nome = e_nome.get()
            email = e_email.get()
            tele = e_tele.get()
            dia = e_data.get()
            estado = e_esta.get()
            assunto = e_consu.get()

            lista = [nome, email, tele, dia, estado, assunto, valor_id]

            if nome == "":
                messagebox.showerror('Erro', 'o nome não pode ser vazio')

            else:
                atualizar_info(lista)
                messagebox.showinfo('Sucesso', "Os dados foram atualizados")

                e_nome.delete(0, 'end')
                e_email.delete(0, 'end')
                e_tele.delete(0, 'end')
                e_data.delete(0, 'end')
                e_esta.delete(0, 'end')
                e_consu.delete(0, 'end')

            for widget in frame_direito.winfo_children():
                widget.destroy()

            b4.destroy()
            mostrar()

        # botao att
        b4 = Button(frame_baixo, text='Confirmar', bg=co2, fg=co1, width=10, relief='raised', overrelief='ridge',
                    command=update)
        b4.place(x=105, y=340)


    except IndexError:
        messagebox.showerror("Erro", 'Selecione um dos dados na tabela')


# funcao deletar
def deletar():
    try:
        treev_dados = tree.focus()
        treev_dicionario = tree.item(treev_dados)
        tree_lista = treev_dicionario['values']

        valor_id = [tree_lista[0]]
        deletar_info(valor_id)
        messagebox.showinfo('Sucesso', "Os dados foram deletados")
        for widget in frame_direito.winfo_children():
            widget.destroy()
        mostrar()

    except IndexError:
        messagebox.showerror("Erro", 'Selecione um dos dados na tabela')


b1 = Button(frame_baixo, text='Inserir', bg=co6, fg=co1, width=10, relief='raised', overrelief='ridge', command=inserir)
b1.place(x=15, y=340)

b2 = Button(frame_baixo, text='Atualizar', bg=co2, fg=co1, width=10, relief='raised', overrelief='ridge',
            command=atualizar)
b2.place(x=105, y=340)

b3 = Button(frame_baixo, text='Deletar', bg=co7, fg=co1, width=10, relief='raised', overrelief='ridge', command=deletar)
b3.place(x=195, y=340)

# chamando a funçao mostrar
mostrar()

janela.mainloop()



import sqlite3 as lite

#CRUD


#c = inserir / criar
#r = acessar / mostrar
#u = update
#d = delete

#criando conexão
con = lite.connect('dados.bd1')



#inserir informações
def inserir_info(i):
    with con:
        cur = con.cursor()
        query = 'INSERT INTO formulario(nome, email, telefone, data, estado, sobre) VALUES(?,?,?,?,?,?)'
        cur.execute(query,i)



#acessar informaço

def mostrar_info():
    lista = []
    with con:
        cur = con.cursor()
        query = 'SELECT * FROM formulario'
        cur.execute(query)
        info = cur.fetchall()

        for i in info:
            lista.append(i)
    return lista



#att informações
def atualizar_info(i):
    with con:
        cur = con.cursor()
        query = 'UPDATE formulario SET Nome=?, email=?, telefone=?,Data=?,Estado=?,Sobre=? WHERE id =?'
        cur.execute(query,i)



#delete info
def deletar_info(i):
    with con:
        cur = con.cursor()
        query = 'DELETE FROM formulario WHERE id=?'
        cur.execute(query, i)
